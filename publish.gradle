// Copyright (C) 2017 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
if (project.ext.has("exoplayerPublishEnabled")
        && project.ext.exoplayerPublishEnabled) {
    apply plugin: 'bintray-release'
    publish {
        artifactId = releaseArtifact
        desc = releaseDescription
        publishVersion = releaseVersion
        repoName = getBintrayRepo()
        userOrg = 'google'
        groupId = 'com.google.android.exoplayer'
        website = 'https://github.com/google/ExoPlayer'
    }

    gradle.taskGraph.whenReady { taskGraph ->
        project.tasks
                .findAll { task -> task.name.contains("generatePomFileFor") }
                .forEach { task ->
                    task.doLast {
                        task.outputs.files
                                .filter { File file ->
                                    file.path.contains("publications") \
                                        && file.name.matches("^pom-.+\\.xml\$")
                                }
                                .forEach { File file -> addLicense(file) }
                    }
                }
    }
}

def getBintrayRepo() {
    boolean publicRepo = hasProperty('publicRepo') &&
        property('publicRepo').toBoolean()
    return publicRepo ? 'exoplayer' : 'exoplayer-test'
}

static void addLicense(File pom) {
    def licenseNode = new Node(null, "license")
    licenseNode.append(
        new Node(null, "name", "The Apache Software License, Version 2.0"))
    licenseNode.append(
        new Node(null, "url", "http://www.apache.org/licenses/LICENSE-2.0.txt"))
    licenseNode.append(new Node(null, "distribution", "repo"))
    def licensesNode = new Node(null, "licenses")
    licensesNode.append(licenseNode)

    def xml = new XmlParser().parse(pom)
    xml.append(licensesNode)

    def writer = new PrintWriter(new FileWriter(pom))
    writer.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
    def printer = new XmlNodePrinter(writer)
    printer.preserveWhitespace = true
    printer.print(xml)
    writer.close()
}

def getLocalProperty(propertyName) {
    if (project.ext.has(propertyName)) {
        return project.ext.get(propertyName)
    }
    Properties properties = new Properties()
    if (project.rootProject.file('local.properties').canRead()) {
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        return properties.getProperty(propertyName, '')
    }
    return ''
}

if (project.ext.has("artifactoryEnabled")
        && project.ext.artifactoryEnabled) {
    def ARTIFACTORY_USER_NAME = getLocalProperty('ARTIFACTORY_USER_NAME')
    def ARTIFACTORY_PASSWORD = getLocalProperty('ARTIFACTORY_PASSWORD')
    def buildNumber = project.ext.buildNumber

    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'
    artifactoryPublish.skip = true
    artifactoryPublish.dependsOn('build')

    publishing {
        publications {
            aar(MavenPublication) {
                groupId 'com.netflix.android.exoplayer' //put here your groupId
                artifactId releaseArtifact //put here your artifactId
                version "$releaseVersion.$buildNumber" //put here your library version

                // Tell maven to prepare the generated "*.aar" file for publishing
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

                //The publication doesn't know about our dependencies, so we have to manually add them to the pom
                pom.withXml {
                    // for dependencies and exclusions
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.compile.allDependencies.each { dp ->
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dp.group)
                        dependencyNode.appendNode('artifactId', dp.name)
                        dependencyNode.appendNode('version', dp.version)
                    }
                }
            }
        }
    }

    artifactoryPublish {
        publications(publishing.publications.aar)
    }

    artifactory {
        clientConfig.setIncludeEnvVars(true)
        clientConfig.info.addEnvironmentProperty('test.adding.dynVar', new Date().toString())

        contextUrl = 'http://artifacts.netflix.com/'
        publish {
            repository {
                repoKey = 'libs-releases-local-pom'
                username = ARTIFACTORY_USER_NAME
                password = ARTIFACTORY_PASSWORD
                // This is an optional section for configuring Ivy publication (when publishIvy = true).
                ivy {
                    ivyLayout = '[organization]/[module]/ivy-[revision].xml'
                    artifactLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'
                    mavenCompatible = true
                    //Convert any dots in an [organization] layout value to path separators, similar to Maven's groupId-to-path conversion. True if not specified
                }
            }
            defaults {
                // Reference to Gradle publications defined in the build script.
                // This is how we tell the Artifactory Plugin which artifacts should be
                // published to Artifactory.
                publishArtifacts = true
                // Properties to be attached to the published artifacts.
                properties = ['qa.level': 'basic', 'dev.team': 'core']
                publishPom = true // Publish generated POM files to Artifactory (true by default)
            }
        }
    }


    artifactoryPublish {
        doLast {
            if (ARTIFACTORY_USER_NAME == '') {
                throw new GradleException('ARTIFACTORY_USER_NAME not set in local.properties')
            }
            if (ARTIFACTORY_PASSWORD == '') {
                throw new GradleException('ARTIFACTORY_PASSWORD not set in local.properties')
            }
        }
    }
}
